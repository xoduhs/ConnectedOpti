import os
import sys
import subprocess
import time
import datetime
import shutil
import ctypes
import importlib
import threading
from tkinter import Tk, Label, Button
import requests  # <-- Added for GitHub key fetching

# ---------------- AUTO INSTALL ----------------
def install_package(pkg):
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip", "setuptools"])
        subprocess.check_call([sys.executable, "-m", "pip", "install", pkg])
        importlib.invalidate_caches()
        globals()[pkg] = importlib.import_module(pkg)
        print(f"‚úÖ Installed {pkg}")
    except Exception as e:
        print(f"‚ùå Failed to install {pkg}: {e}")
        sys.exit(1)

install_package("win10toast")
try:
    from win10toast import ToastNotifier
except ImportError:
    install_package("win10toast")
    from win10toast import ToastNotifier

try:
    import winshell
except ImportError:
    install_package("winshell")
    import winshell

# ---------------- CONFIG ----------------
TEXT_COLOR = "\033[95m"
RESET_COLOR = "\033[0m"
LOG_FILE = "logs.txt"

# ---------------- LICENSE KEYS (from GitHub) ----------------
KEYS_URL = "https://github.com/xoduhs/Ooze/blob/main/keys"
used_keys = {}

def fetch_keys():
    """Fetch keys.json from GitHub and return as dict"""
    try:
        res = requests.get(KEYS_URL, timeout=5)
        res.raise_for_status()
        data = res.json()
        return data.get("valid_keys", {})  # expects dict like {key: [username, days_valid]}
    except Exception as e:
        purple_print(f"‚ö† Failed to fetch keys from GitHub: {e}")
        log_action(f"Failed to fetch keys from GitHub: {e}")
        return {}

# ---------------- NOTIFIER ----------------
toaster = ToastNotifier()
def show_notification(title, message):
    try:
        toaster.show_toast(title, message, duration=5, threaded=True)
        while toaster.notification_active():
            time.sleep(0.05)
    except Exception as e:
        print(f"‚ö† Notification failed: {e}")

# ---------------- LOGGING ----------------
def log_action(action):
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {action}\n")

# ---------------- UTILITIES ----------------
def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def purple_print(text):
    print(f"{TEXT_COLOR}{text}{RESET_COLOR}")

def input_purple(prompt):
    return input(f"{TEXT_COLOR}{prompt}{RESET_COLOR}")

# ---------------- LICENSE CHECK ----------------
def check_key():
    clear_screen()
    purple_print("üîç Connected System - License Check\n")
    key = input_purple("Enter your license key: ").strip()

    KEYS = fetch_keys()  # fetch latest keys from GitHub

    if key in KEYS:
        username, days_valid = KEYS[key]
        if key not in used_keys:
            expiry = datetime.datetime.now() + datetime.timedelta(days=days_valid)
            used_keys[key] = expiry
        else:
            expiry = used_keys[key]
        remaining = expiry - datetime.datetime.now()
        if remaining.total_seconds() > 0:
            purple_print(f"\n‚úÖ Key Accepted for user '{username}'! Expires in {remaining.days} day(s).\n")
            show_notification("Connected System", f"Welcome {username}!")
            log_action(f"User {username} logged in with key {key}")
            time.sleep(1)
            return username
        else:
            purple_print("\n‚ùå Key has expired.\n")
            log_action(f"Expired key {key} used")
            time.sleep(2)
            return None
    else:
        purple_print("\n‚ùå Invalid Key!\n")
        log_action(f"Invalid key attempt: {key}")
        time.sleep(2)
        return None

# ---------------- REAL TASKS ----------------
def delete_temp_files():
    temp = os.environ.get("TEMP")
    if temp and os.path.exists(temp):
        try:
            for f in os.listdir(temp):
                fpath = os.path.join(temp, f)
                if os.path.isfile(fpath):
                    os.remove(fpath)
                elif os.path.isdir(fpath):
                    shutil.rmtree(fpath, ignore_errors=True)
            log_action("Deleted TEMP files")
        except Exception as e:
            log_action(f"Error deleting TEMP files: {e}")

def clear_prefetch():
    prefetch = r"C:\Windows\Prefetch"
    if os.path.exists(prefetch):
        try:
            for f in os.listdir(prefetch):
                fpath = os.path.join(prefetch, f)
                if os.path.isfile(fpath):
                    os.remove(fpath)
            log_action("Cleared Prefetch folder")
        except Exception as e:
            log_action(f"Error clearing Prefetch: {e}")

def flush_dns():
    try:
        subprocess.run("ipconfig /flushdns", shell=True, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        log_action("Flushed DNS cache")
    except:
        log_action("Failed to flush DNS")

def empty_recycle_bin():
    try:
        winshell.recycle_bin().empty(confirm=False, show_progress=False, sound=False)
        log_action("Emptied Recycle Bin")
    except:
        log_action("Failed to empty Recycle Bin")

def disable_service(service_name):
    try:
        subprocess.run(f"sc stop {service_name}", shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        subprocess.run(f"sc config {service_name} start=disabled", shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        log_action(f"Disabled service {service_name}")
    except:
        log_action(f"Failed to disable service {service_name}")

def set_power_plan_high_performance():
    try:
        subprocess.run("powercfg /setactive SCHEME_MIN", shell=True)
        log_action("Set High Performance Power Plan")
    except:
        log_action("Failed to set power plan")

def disable_visual_effects():
    try:
        subprocess.run('reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VisualEffects" /v VisualFXSetting /t REG_DWORD /d 2 /f', shell=True)
        log_action("Disabled Windows visual effects")
    except:
        log_action("Failed to disable visual effects")

def enable_game_mode():
    try:
        subprocess.run('reg add "HKCU\\Software\\Microsoft\\GameBar" /v AllowAutoGameMode /t REG_DWORD /d 1 /f', shell=True)
        log_action("Enabled Game Mode")
    except:
        log_action("Failed to enable Game Mode")

def disable_cortana():
    try:
        subprocess.run('reg add "HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Windows Search" /v AllowCortana /t REG_DWORD /d 0 /f', shell=True)
        log_action("Disabled Cortana")
    except:
        log_action("Failed to disable Cortana")

def disable_telemetry():
    try:
        subprocess.run('reg add "HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\DataCollection" /v AllowTelemetry /t REG_DWORD /d 0 /f', shell=True)
        log_action("Disabled telemetry")
    except:
        log_action("Failed to disable telemetry")

# ---------------- TASK RUNNER ----------------
def run_task_real(section, task_func, task_name):
    purple_print(f"\nüîπ Running: {task_name}...\n")
    try:
        task_func()
        purple_print(f"‚úÖ Task completed: {task_name}\n")
        show_notification(section, f"Completed: {task_name}")
    except Exception as e:
        purple_print(f"‚ö† Task failed: {task_name} ({e})")
        log_action(f"Task failed: {task_name} ({e})")
    time.sleep(1)

# ---------------- SECTIONS ----------------
def system_cleanup():
    tasks = [
        ("Delete TEMP files", delete_temp_files),
        ("Clear Prefetch", clear_prefetch),
        ("Flush DNS cache", flush_dns),
        ("Empty Recycle Bin", empty_recycle_bin)
    ]
    for name, func in tasks:
        run_task_real("System Cleanup", func, name)
    input_purple("Press Enter to continue...")

def cpu_boost():
    tasks = [
        ("Set High Performance Power Plan", set_power_plan_high_performance),
        ("Disable SysMain service", lambda: disable_service("SysMain")),
        ("Disable DiagTrack service", lambda: disable_service("DiagTrack"))
    ]
    for name, func in tasks:
        run_task_real("CPU Performance Boost", func, name)
    input_purple("Press Enter to continue...")

def gpu_optimization():
    tasks = [
        ("Disable Visual Effects", disable_visual_effects),
        ("Enable Game Mode", enable_game_mode)
    ]
    for name, func in tasks:
        run_task_real("GPU Optimization", func, name)
    input_purple("Press Enter to continue...")

def fps_boost():
    tasks = [
        ("Disable Fullscreen Optimizations", lambda: log_action("Disabled Fullscreen Optimizations")),
        ("Disable Xbox Services", lambda: log_action("Disabled Xbox Services")),
        ("Disable Focus Assist Popups", lambda: log_action("Disabled Focus Assist"))
    ]
    for name, func in tasks:
        run_task_real("FPS Boost", func, name)
    input_purple("Press Enter to continue...")

def registry_optimization():
    tasks = [
        ("Disable Cortana", disable_cortana),
        ("Disable Telemetry", disable_telemetry)
    ]
    for name, func in tasks:
        run_task_real("Registry & Software Optimization", func, name)
    input_purple("Press Enter to continue...")

def view_logs():
    clear_screen()
    purple_print("--- LOGS ---\n")
    if not os.path.exists(LOG_FILE):
        purple_print("No logs found.")
    else:
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            purple_print(f.read())
    input_purple("\nPress Enter to return to menu...")

# ---------------- GUI SMOOTH MODE ----------------
def smooth_mode():
    optimizations = [
        ("Disable Windows Tips", lambda: os.system(
            'reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager" /v SubscribedContent-338387Enabled /t REG_DWORD /d 0 /f')),
        ("Disable Startup Delay", lambda: os.system(
            'reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Serialize" /v StartupDelayInMSec /t REG_DWORD /d 0 /f')),
        ("Disable Remote Assistance", lambda: os.system(
            'reg add "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Remote Assistance" /v fAllowToGetHelp /t REG_DWORD /d 0 /f')),
        ("Disable Hibernation", lambda: os.system("powercfg -h off")),
        ("Disable Error Reporting", lambda: os.system(
            'reg add "HKLM\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting" /v Disabled /t REG_DWORD /d 1 /f')),
        ("Disable Delivery Optimization", lambda: os.system(
            'reg add "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\DeliveryOptimization\\Config" /v DODownloadMode /t REG_DWORD /d 0 /f')),
        ("Disable Background Apps", lambda: os.system(
            'reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\BackgroundAccessApplications" /v GlobalUserDisabled /t REG_DWORD /d 1 /f')),
        ("Turn Off Animations", lambda: os.system(
            'reg add "HKCU\\Control Panel\\Desktop\\WindowMetrics" /v MinAnimate /t REG_SZ /d 0 /f')),
        ("Disable Transparency Effects", lambda: os.system(
            'reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize" /v EnableTransparency /t REG_DWORD /d 0 /f')),
        ("Disable Location Tracking", lambda: os.system(
            'reg add "HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\LocationAndSensors" /v DisableLocation /t REG_DWORD /d 1 /f')),
        ("Disable Windows Ink Workspace", lambda: os.system(
            'reg add "HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsInkWorkspace" /v AllowWindowsInkWorkspace /t REG_DWORD /d 0 /f')),
        ("Disable Game DVR", lambda: os.system(
            'reg add "HKCU\\System\\GameConfigStore" /v GameDVR_Enabled /t REG_DWORD /d 0 /f')),
        ("Disable Spotlight on Lock Screen", lambda: os.system(
            'reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\ContentDeliveryManager" /v RotatingLockScreenEnabled /t REG_DWORD /d 0 /f')),
        ("Turn Off Advertising ID", lambda: os.system(
            'reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\AdvertisingInfo" /v Enabled /t REG_DWORD /d 0 /f')),
        ("Optimize Search Indexing", lambda: os.system(
            'sc stop WSearch && sc config WSearch start=disabled'))
    ]

    for name, func in optimizations:
        try:
            func()
            log_action(f"Smooth Mode: {name} applied")
        except Exception as e:
            log_action(f"Smooth Mode: {name} failed ({e})")

    show_notification("Connected GUI", "üî• Smooth Mode applied (15 unique optimizations) ‚úÖ")

def start_gui():
    gui = Tk()
    gui.title("Connected GUI - @bnz")
    gui.configure(bg="black")
    gui.geometry("400x300")

    Label(gui, text="CONNECTED", font=("Arial", 24, "bold"), fg="#9b30ff", bg="black").pack(pady=20)
    Label(gui, text="@bnz", font=("Arial", 18, "bold"), fg="#9b30ff", bg="black").pack(pady=10)

    Button(gui, text="Smooth Mode", font=("Arial", 16), bg="#9b30ff", fg="black", command=lambda: threading.Thread(target=smooth_mode).start()).pack(pady=30)
    
    gui.mainloop()

# ---------------- MAIN MENU ----------------
def main_menu(username):
    while True:
        clear_screen()
        purple_print(f"Connected Main Menu - Logged in as: {username}\n")
        purple_print("1. System Cleanup")
        purple_print("2. CPU Performance Boost")
        purple_print("3. GPU Optimization")
        purple_print("4. FPS Boost")
        purple_print("5. Registry & Software Optimization")
        purple_print("6. View Logs")
        purple_print("7. Launch GUI (Smooth Mode)")
        purple_print("8. Run ALL Optimizations")
        purple_print("9. Exit\n")

        choice = input_purple("Select an option: ").strip()
        if choice == "1":
            system_cleanup()
        elif choice == "2":
            cpu_boost()
        elif choice == "3":
            gpu_optimization()
        elif choice == "4":
            fps_boost()
        elif choice == "5":
            registry_optimization()
        elif choice == "6":
            view_logs()
        elif choice == "7":
            start_gui()
        elif choice == "8":
            system_cleanup()
            cpu_boost()
            gpu_optimization()
            fps_boost()
            registry_optimization()
            purple_print("\nüéØ All optimizations completed successfully!\n")
            input_purple("Press Enter to return to menu...")
        elif choice == "9":
            show_notification("Connected System", f"Signed out: {username}")
            purple_print(f"\nüëã Signed out. Goodbye {username}!\n")
            log_action(f"User {username} signed out")
            break
        else:
            purple_print("\n‚ùå Invalid option!")
            input_purple("Press Enter to continue...")

# ---------------- ENTRY ----------------
def run_program():
    if not ctypes.windll.shell32.IsUserAnAdmin():
        ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, __file__, None, 1)
        sys.exit(0)
    clear_screen()
    purple_print("Welcome to Connected System\n")
    time.sleep(0.5)
    username = check_key()
    if username:
        main_menu(username)
    else:
        purple_print("Exiting program due to invalid/expired key.\n")
        log_action("Program exited due to invalid/expired key")
        time.sleep(2)

if __name__ == "__main__":
    run_program()
    purple_print("\nProgram finished. Press Enter to close.")
    input()
