import os
import sys
import subprocess
import tempfile
import importlib
import json
from datetime import datetime
import requests

# -------------------------
# AUTO-INSTALL DEPENDENCIES
# -------------------------
def install_and_import(package):
    try:
        __import__(package)
    except ImportError:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
    finally:
        globals()[package] = importlib.import_module(package)

for pkg in ["PyQt5", "psutil", "pyqtgraph", "requests"]:
    install_and_import(pkg)

from PyQt5 import QtWidgets, QtCore
import psutil, pyqtgraph as pg

# -------------------------
# CONFIG
# -------------------------
GITHUB_KEYS_URL = "https://raw.githubusercontent.com/xoduhs/Ooze/main/keys"
GITHUB_VERSION_URL = "https://raw.githubusercontent.com/xoduhs/Ooze/main/version"
GITHUB_CODE_URL = "https://raw.githubusercontent.com/xoduhs/Ooze/main/update.json"
LOCAL_VERSION_FILE = os.path.join(tempfile.gettempdir(), "ooze_version.txt")
CURRENT_VERSION = "0.3"

# -------------------------
# VERSION MANAGEMENT
# -------------------------
def get_local_version():
    if os.path.exists(LOCAL_VERSION_FILE):
        with open(LOCAL_VERSION_FILE, "r") as f:
            return f.read().strip()
    return CURRENT_VERSION

def set_local_version(version):
    with open(LOCAL_VERSION_FILE, "w") as f:
        f.write(version)

def show_update_code(code_text):
    """Show the full updated code in a scrollable text box"""
    dialog = QtWidgets.QDialog()
    dialog.setWindowTitle("Ooze Update Available")
    dialog.setMinimumSize(800, 600)
    layout = QtWidgets.QVBoxLayout()
    text_edit = QtWidgets.QTextEdit()
    text_edit.setReadOnly(True)
    text_edit.setText(code_text)
    layout.addWidget(text_edit)
    btn = QtWidgets.QPushButton("Close")
    btn.clicked.connect(dialog.accept)
    layout.addWidget(btn)
    dialog.setLayout(layout)
    dialog.exec_()

def check_for_update():
    try:
        r_version = requests.get(GITHUB_VERSION_URL, timeout=5)
        github_version = r_version.text.strip()
        local_version = get_local_version()
        if github_version != local_version:
            r_code = requests.get(GITHUB_CODE_URL, timeout=10)
            code_text = r_code.text
            show_update_code(code_text)
            set_local_version(github_version)
            QtWidgets.QMessageBox.information(None, "Update Applied", "Version updated. Please restart the program.")
            sys.exit()
    except Exception as e:
        print(f"Update check failed: {e}")

# -------------------------
# KEY VALIDATION
# -------------------------
def validate_key():
    key, ok = QtWidgets.QInputDialog.getText(None, "Key Required", "Enter your Ooze Club key:")
    if not ok:
        sys.exit()
    try:
        r = requests.get(GITHUB_KEYS_URL, timeout=5)
        keys_data = json.loads(r.text)
        valid_keys = keys_data.get("valid_keys", {})

        key_info = valid_keys.get(key.strip())
        if key_info:
            username, expire_str = key_info
            expire_dt = datetime.strptime(expire_str, "%Y-%m-%d %H:%M:%S")
            if datetime.now() <= expire_dt:
                return True
            else:
                QtWidgets.QMessageBox.critical(None, "Expired Key", "This key has expired.")
                sys.exit()
        else:
            QtWidgets.QMessageBox.critical(None, "Invalid Key", "Key not found in GitHub repository.")
            sys.exit()
    except Exception as e:
        QtWidgets.QMessageBox.critical(None, "Error", f"Failed to check key: {e}")
        sys.exit()

# -------------------------
# HELPER FUNCTIONS
# -------------------------
def run_command(cmd):
    try:
        subprocess.run(cmd, shell=True, check=True)
    except Exception as e:
        print(f"Error: {e}")

# -------------------------
# MAIN GUI
# -------------------------
class OozeOptimizer(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Ooze Club Optimizer")
        self.setGeometry(200, 100, 1000, 700)
        self.setStyleSheet("background-color: #1e1e1e; color: orange;")

        self.tabs = QtWidgets.QTabWidget()
        self.setCentralWidget(self.tabs)

        # Home tab
        self.home_tab = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout()

        owners_label = QtWidgets.QLabel("Owners: @ql3s @yerkv")
        owners_label.setAlignment(QtCore.Qt.AlignRight)
        layout.addWidget(owners_label)

        graph_layout = QtWidgets.QHBoxLayout()
        self.cpu_graph = pg.PlotWidget(title="CPU Usage")
        self.mem_graph = pg.PlotWidget(title="Memory Usage")
        self.cpu_graph.setYRange(0, 100)
        self.mem_graph.setYRange(0, 100)
        graph_layout.addWidget(self.cpu_graph)
        graph_layout.addWidget(self.mem_graph)
        layout.addLayout(graph_layout)

        run_all_btn = QtWidgets.QPushButton("Run All Optimizations")
        run_all_btn.clicked.connect(self.run_all_opts)
        layout.addWidget(run_all_btn)

        self.home_tab.setLayout(layout)
        self.tabs.addTab(self.home_tab, "Home")

        # Add safe optimization tabs
        self.add_opt_tab("Windows", self.windows_opts())
        self.add_opt_tab("Network", self.network_opts())
        self.add_opt_tab("Extra", self.extra_opts())

        # Timer for CPU/Memory graph
        self.cpu_data, self.mem_data = [], []
        self.graph_timer = QtCore.QTimer()
        self.graph_timer.timeout.connect(self.update_graphs)
        self.graph_timer.start(1000)

    def add_opt_tab(self, name, opts):
        tab = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout()
        for text, func in opts:
            btn = QtWidgets.QPushButton(text)
            btn.clicked.connect(func)
            layout.addWidget(btn)
        tab.setLayout(layout)
        self.tabs.addTab(tab, name)

    def update_graphs(self):
        cpu = psutil.cpu_percent()
        mem = psutil.virtual_memory().percent
        self.cpu_data.append(cpu)
        self.mem_data.append(mem)
        if len(self.cpu_data) > 20: self.cpu_data.pop(0)
        if len(self.mem_data) > 20: self.mem_data.pop(0)
        self.cpu_graph.plot(self.cpu_data, clear=True, pen='y')
        self.mem_graph.plot(self.mem_data, clear=True, pen='r')

    def run_all_opts(self):
        for tab_index in range(1, self.tabs.count()):
            tab = self.tabs.widget(tab_index)
            for btn in tab.findChildren(QtWidgets.QPushButton):
                btn.click()

    # -------------------------
    # SAFE OPTIMIZATIONS
    # -------------------------
    def windows_opts(self):
        return [
            ("Clear Temp Files", lambda: run_command("del /s /f /q %temp%\\*")),
            ("Disk Cleanup", lambda: run_command("cleanmgr /sagerun:1")),
            ("Clear Prefetch", lambda: run_command("del /s /f /q C:\\Windows\\Prefetch\\*")),
            ("Clear Recycle Bin", lambda: run_command("rd /s /q C:\\$Recycle.bin")),
            ("Optimize Power Plan", lambda: run_command("powercfg -setactive SCHEME_MIN")),
            ("Enable Fast Startup", lambda: run_command("powercfg /hibernate on")),
            ("Clear Event Logs", lambda: run_command("wevtutil cl System")),
            ("Reset Network", lambda: run_command("netsh int ip reset")),
        ]

    def network_opts(self):
        return [
            ("Ping Google", lambda: run_command("ping 8.8.8.8")),
            ("Ping Cloudflare", lambda: run_command("ping 1.1.1.1")),
            ("Optimize TCP", lambda: run_command("netsh int tcp set global autotuninglevel=normal")),
        ]

    def extra_opts(self):
        return [
            ("Clear Temp Internet Files", lambda: run_command("RunDll32.exe InetCpl.cpl,ClearMyTracksByProcess 8")),
            ("Clear Clipboard", lambda: run_command("echo off | clip")),
            ("Reset File Explorer View", lambda: run_command("taskkill /f /im explorer.exe & start explorer.exe")),
            ("Clear Windows Store Cache", lambda: run_command("wsreset.exe")),
        ]

# -------------------------
# RUN
# -------------------------
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    check_for_update()
    validate_key()
    window = OozeOptimizer()
    window.show()
    sys.exit(app.exec_())
